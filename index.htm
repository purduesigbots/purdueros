<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>Purdue Robotics Operating System: Welcome to the Purdue Robotics Operating System (PROS)!</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="user.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Purdue Robotics Operating System
   &#160;<span id="projectnumber">2b10</span>
   </div>
   <div id="projectbrief">Simple, high-performance operating system for the VEX Cortex Microcontroller</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li class="current"><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Welcome to the Purdue Robotics Operating System (PROS)! </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h1><a class="anchor" id="Top"></a>
Table of Contents</h1>
<ul>
<li><a class="el" href="index.htm#Overview">Overview and API Reference</a></li>
<li><a class="el" href="index.htm#Installation">Installation</a><ul>
<li><a class="el" href="index.htm#Windows">Windows</a></li>
<li><a class="el" href="index.htm#Linux">Linux</a></li>
<li><a class="el" href="index.htm#Mac">Mac OS X</a></li>
</ul>
</li>
<li><a class="el" href="index.htm#Started">Getting started</a><ul>
<li><a class="el" href="index.htm#Creating">Creating a new project</a></li>
<li><a class="el" href="index.htm#Writing">Writing code</a></li>
<li><a class="el" href="index.htm#Compiling">Compiling the project</a></li>
<li><a class="el" href="index.htm#Uploading">Uploading the project</a></li>
<li><a class="el" href="index.htm#Debugging">Debugging and feedback</a></li>
<li><a class="el" href="index.htm#Management">Project management</a></li>
<li><a class="el" href="index.htm#Updating">Updating a project</a></li>
</ul>
</li>
<li><a class="el" href="index.htm#Tutorial">PROS Tutorial</a><ul>
<li><a class="el" href="index.htm#C">C Basics</a></li>
<li><a class="el" href="index.htm#Project">PROS Project Structure</a></li>
<li><a class="el" href="index.htm#Declaration">Declaring Functions and Variables</a></li>
<li><a class="el" href="index.htm#Templates">Examples and templates</a><ul>
<li><a class="el" href="index.htm#Sensors">Sensors</a></li>
<li><a class="el" href="index.htm#Actuators">Actuators</a></li>
<li><a class="el" href="index.htm#Tasks">Tasks</a></li>
</ul>
</li>
<li><a class="el" href="index.htm#Common">Common tasks</a></li>
<li><a class="el" href="index.htm#FAQ">PROS Coding FAQ</a></li>
</ul>
</li>
<li><a class="el" href="index.htm#Advanced">Advanced topics</a><ul>
<li><a class="el" href="index.htm#Git">Source control</a><ul>
<li><a class="el" href="index.htm#GitSetup">Initial setup</a></li>
<li><a class="el" href="index.htm#GitExternal">Use with an online service</a></li>
<li><a class="el" href="index.htm#GitAdd">Adding a project to source control</a></li>
<li><a class="el" href="index.htm#GitCommit">Committing changes</a></li>
<li><a class="el" href="index.htm#GitUsage">Using source control</a></li>
</ul>
</li>
<li><a class="el" href="index.htm#OutsideIDE">Using PROS without the PROS IDE</a><ul>
<li><a class="el" href="index.htm#CmdLine">Using PROS on the command line</a></li>
<li><a class="el" href="index.htm#VisualStudio">Using PROS with Visual Studio</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1><a class="anchor" id="Overview"></a>
Overview and API Reference</h1>
<p>PROS is a lightweight and fast alternative operating system for the VEX Cortex Microcontroller. It features multitasking, low-level control, and Wiring compatible functions to harness the full power of the Cortex.</p>
<p>Detailed, function by function PROS documentation can be found in the file references for <a class="el" href="a00003.htm" title="Provides the high-level user functionality intended for use by typical VEX Cortex programmers...">API.h</a> and <a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>.</p>
<h2><a class="anchor" id="Installation"></a>
Installation</h2>
<h3><a class="anchor" id="Windows"></a>
Windows</h3>
<ul>
<li>Obtain the latest version of PROS for Windows from the <a href="https://github.com/purduesigbots/purdueros/releases">download site</a>. Select the 32 or 64- bit version to match the running version of Windows.</li>
<li>Run the downloaded installer. If a dialog box appears requesting permission to modify the computer, select Yes; otherwise, PROS will not be able to install the IDE. <div class="image">
<img src="uac_install.png" alt="uac_install.png"/>
<div class="caption">
Click YES on User Account Control pop-ups in Windows Vista, 7, and 8</div></div>
</li>
<li>Accept the license agreement and select an installation location. Recent revisions can be installed to any location; 2b03 and earlier must be installed to a user writable directory.</li>
<li>On the install options page, select "Java" if Java is not installed. Select "Drivers" if the drivers required for the VEX Programming Cable have not been installed before. <div class="image">
<img src="driver_select.png" alt="driver_select.png"/>
<div class="caption">
Java and the VEX drivers can be optionally installed by PROS</div></div>
</li>
<li>Click <code>Next</code> to install PROS. Additional prompts may appear for the installation of Java or the VEX drivers. <div class="image">
<img src="pl2303_driver_windows.png" alt="pl2303_driver_windows.png"/>
<div class="caption">
Prompt to install VEX drivers for old programming cable</div></div>
 <div class="image">
<img src="vex_driver_windows.png" alt="vex_driver_windows.png"/>
<div class="caption">
Prompt to install VEX drivers for new programming cable</div></div>
</li>
<li>After installation, PROS can be started via the Start Menu shortcut.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="Linux"></a>
Linux</h3>
<ul>
<li>Obtain the latest version of PROS for Linux from the <a href="https://github.com/purduesigbots/purdueros/releases">download site</a>. Select the 32 or 64- bit version to match the running version of Linux. <em>Some 64-bit computers may have 32-bit Linux installed. To find out for sure, use</em> <code>uname -m</code>. <div class="image">
<img src="unamem.png" alt="unamem.png"/>
<div class="caption">
Use 'uname -m' to determine Linux 32/64 bit version</div></div>
</li>
<li>In some versions of Ubuntu, double-clicking the downloaded <code>.deb</code> file will successfully install PROS and all its dependencies. If this does not work, open a terminal in the directory where PROS was downloaded and run <code>sudo dpkg -i prose*.deb; sudo apt-get -f install</code> <div class="image">
<img src="terminal_install.png" alt="terminal_install.png"/>
<div class="caption">
Open a terminal in download location to install</div></div>
</li>
<li>PROS will be installed to <code>/opt/pros</code>. Device rules and symlinks to the included toolchain may also be installed in <code>/usr/local/bin</code> and <code>/usr/lib</code>.</li>
<li>After installation, PROS can be started through the <code>Development &gt; PROS IDE</code> shortcut in the <code>Applications</code> or <code>Start</code> menu, or through the search feature in the desktop environment. <div class="image">
<img src="pros_shortcut_linux.png" alt="pros_shortcut_linux.png"/>
<div class="caption">
PROS will appear in the main menu</div></div>
</li>
<li><em>The direct tether to the VEX Cortex is not supported at this time, due to a lack of Linux driver support.</em> In Linux kernels <code>3.2</code> and newer (Ubuntu <code>12.04</code> and newer), both the new orange VEX Programming Kit and the older serial Programming Kit will work without installing any drivers.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="Mac"></a>
Mac OS X</h3>
<ul>
<li>Obtain the latest version of PROS for Mac OS X from the <a href="https://github.com/purduesigbots/purdueros/releases">download site</a>.</li>
<li>Run the downloaded installer <code>.pkg</code>. Accept the license agreement to install PROS. <div class="image">
<img src="install_mac.png" alt="install_mac.png"/>
<div class="caption">
PROS installation screen on Mac</div></div>
</li>
<li>Install compatible programming cable drivers from <a href="http://prolificusa.com/pl-2303hx-drivers/">the Prolific website</a>. <em>Restart the computer.</em></li>
<li>After installation, PROS can be started through the <code>Applications &gt; PROS</code> shortcut or through the Spotlight or Applications List.</li>
<li><em>The direct tether to the VEX Cortex is not supported at this time, due to a lack of Mac OS X driver support.</em> The new orange VEX Programming Kit works by default, but the older serial cables can be unreliable on some machines.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="License"></a>
PROS License Agreement</h2>
<p>Copyright (c) 2011-2013, Purdue University ACM SIG BOTS. All rights reserved.</p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p><ul>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>
<li>Neither the name of Purdue University ACM SIG BOTS nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li>
</ul>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL PURDUE UNIVERSITY ACM SIG BOTS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h1><a class="anchor" id="Started"></a>
Getting started</h1>
<ul>
<li>After the PROS splash screen appears, a <code>Workspace Launcher</code> prompt may appear. The default location is usually acceptable, but if it serves better to move it to an easy-to-remember place, it can be moved here. The workspace is the default location of new PROS projects. <div class="image">
<img src="workspace_select.png" alt="workspace_select.png"/>
<div class="caption">
Select a workspace, or check the checkbox to avoid on every startup</div></div>
</li>
<li>If starting PROS for the first time, a warning may appear about <em>EGit could not detect where Git is installed</em> or <em>Check Home Directory</em>. These can be ignored, as they are related to configuration for the source control features of PROS. PROS will operate correctly with or without <code>Git</code> installed. <div class="image">
<img src="git_warning.png" alt="git_warning.png"/>
<div class="caption">
Dialog box can be ignored</div></div>
 <div class="image">
<img src="check_homedir.png" alt="check_homedir.png"/>
<div class="caption">
Dialog box can be ignored if the value of HOME is reasonable</div></div>
</li>
<li>Go to the main PROS window from the home screen by pressing the <code>Workbench</code> button. <div class="image">
<img src="goto_workbench.png" alt="goto_workbench.png"/>
<div class="caption">
Skip the start page</div></div>
</li>
<li>The PROS main window will appear. <div class="image">
<img src="pros_noproject.png" alt="pros_noproject.png"/>
<div class="caption">
The PROS main window</div></div>
</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Creating"></a>
Creating a new project</h2>
<ul>
<li>To create a new, blank PROS project for the VEX Cortex, select <code>File &gt; New &gt; VEX Cortex PROS Project</code>. Enter a short name <em>without spaces or punctuation</em> into the dialog box. To change the location where the project will be saved, deselect <code>Use default location</code> and enter an alternative location (<em>preferably accessible to the whole team...</em>). Click <code>Finish</code> to create the project. <div class="image">
<img src="pros_newprojectmenu.png" alt="pros_newprojectmenu.png"/>
<div class="caption">
Creating a new PROS project</div></div>
 <div class="image">
<img src="pros_newprojectwizard.png" alt="pros_newprojectwizard.png"/>
<div class="caption">
Enter the project's name to create in workspace</div></div>
</li>
<li>The new project will appear in the <code>Project Explorer</code> view. This view is useful to navigate among the multiple files present in each PROS project. To make code easier to maintain, the autonomous and driver control are split by default into two files, <code><a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a></code> and <code><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a></code>. <div class="image">
<img src="pros_defaultproject.png" alt="pros_defaultproject.png"/>
<div class="caption">
PROS default project layout</div></div>
</li>
<li>The project is self-contained; copying the folder and all the files inside is sufficient for another PROS user to work on the code.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Writing"></a>
Writing code</h2>
<ul>
<li>Double-clicking on a file in the <code>Project Explorer</code> will open it in a text editor in the main window.</li>
<li>PROS uses standard C code. How to code in PROS is explained in <a class="el" href="index.htm#Tutorial">PROS Tutorial</a>. Syntax highlighting, auto-indent, and auto-complete (accessible using <code>CTRL + SPACE</code>) can make coding fast and joyful.</li>
<li><em>Remember to</em> save (<code>CTRL + S</code>) the code often. PROS will auto-save files with a confirmation dialog, but this popup gets annoying quickly.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Compiling"></a>
Compiling the project</h2>
<ul>
<li>Before code can be run, it must be <em>compiled</em>, which translates the coder's intentions into a format that the Cortex Microcontroller can understand. To compile code, save any open files and press <code>CTRL + B</code>.</li>
<li>At this time, PROS IDE will compile the code and look for errors. <em>Not all errors will be caught at this stage</em>; e.g. division by zero will often not be found until runtime. But mistakes in syntax such as leaving out a <code>;</code> will cause the code to fail compilation.</li>
<li>A summary of all errors and warnings is available in the <code>Problems</code> tab on the bottom. Double-click a message to go to the location where the error occurred. <div class="image">
<img src="error_messages.png" alt="error_messages.png"/>
<div class="caption">
Errors and warnings shown in the Problems dialog</div></div>
 <div class="image">
<img src="error_description.png" alt="error_description.png"/>
<div class="caption">
Double-clicking goes to the error line with a red X marker</div></div>
</li>
<li>One error can cause others. Try fixing the first error on the list and recompiling before tackling the others, unless the cause of subsequent errors is obvious.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Uploading"></a>
Uploading the project</h2>
<ul>
<li>When the project compiles correctly, upload the project to the robot by using either the <code>Upload</code> toolbar button, the <code>VEX &gt; Upload to Cortex</code> menu item, or the <code>F7</code> keyboard shortcut. <div class="image">
<img src="pros_upload.png" alt="pros_upload.png"/>
<div class="caption">
Two methods of uploading to the Cortex Microcontroller, or just press F7</div></div>
</li>
<li>Uploading, by default, will erase all files on the PROS File System. If file data stored on the VEX Cortex should be preserved, use the <code>VEX &gt; File System &gt; Upload Preserving Filesystem</code> menu item; <em>this will be slower than a regular upload</em>.</li>
<li>Files can be transferred to and from the VEX Cortex using the other options in the <code>File System</code> sub-menu. Copying files to the VEX Cortex can be accomplished with <code>Write File to Cortex</code>, while copying files from the VEX Cortex is done with <code>Read File from Cortex</code>. <em>The PROS File System cannot store more than one program at a time and is intended for storing data or logs.</em> <div class="image">
<img src="pros_upload_fs.png" alt="pros_upload_fs.png"/>
<div class="caption">
The `File System` menu transfers files to and from the VEX Cortex</div></div>
</li>
<li>Robots must be plugged in and turned on to upload code. If an error occurs stating that no device could be found, make sure that all connections are plugged in tightly and try again. <div class="image">
<img src="pros_noplug.png" alt="pros_noplug.png"/>
<div class="caption">
Error message when robots are unplugged or powered off</div></div>
</li>
<li>Uploading performance may be poor over wireless VEXnet if there is a significant amount of active wireless devices in the area. Consider moving the robot close to the joystick when uploading, or using the orange tether cable. <em>Uploading over VEXnet with a VEX Competition Switch plugged in may fail</em>; remove any connection to the Competition port if uploading over VEXnet.</li>
<li>Terminal programs such as CoolTerm, PuTTY, or screen using the port must be closed before uploading. If a terminal is open from inside the PROS IDE, it will be automatically closed.</li>
<li>VEX Driver support can be poor on Mac OS X and Linux. The newer VEX Programming Cable works well on all platforms, but the VEX Cortex direct connection to the PC only works on Windows. The older orange serial programming cables work on Windows and Linux but may have problems on Mac OS X.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Debugging"></a>
Debugging and feedback</h2>
<ul>
<li>Several functions, including <a class="el" href="a00003.htm#a403c82418e475fa4a8273719e6a7f3e6">printf</a> and <a class="el" href="a00003.htm#af17f2f3fda696ddc3b7c1bac995edaf8">puts</a>, will output data to the PC for debugging purposes. This data can be viewed with a standard serial port viewer such as <a href="http://freeware.the-meiers.org/">CoolTerm</a> or <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</a>. It can also be viewed inside the PROS IDE:</li>
<li>Select <code>Window &gt; Show View &gt; Terminal</code>; if <code>Terminal</code> is unavailable, select <code>Window &gt; Show View &gt; Other...</code> and select <code>Terminal</code> from the list. <div class="image">
<img src="terminal_open.png" alt="terminal_open.png"/>
<div class="caption">
Opening a Terminal view</div></div>
</li>
<li>Select the <code>Connect</code> button. If the terminal has been used before, it will connect immediately; otherwise, a prompt will appear. <div class="image">
<img src="terminal_connect.png" alt="terminal_connect.png"/>
<div class="caption">
Opening a new Terminal connection</div></div>
</li>
<li>Change the <code>Baud Rate</code> in the pop up dialog to <code>115200</code>. The default choice for <code>Port</code> is usually correct on Windows. For Linux and Mac OS X, the most likely correct <code>Port</code> is the entry containing "usb" or "acm" in the name. If the suggested option fails, experiment to find which one works. <div class="image">
<img src="terminal_config.png" alt="terminal_config.png"/>
<div class="caption">
Configuring to set Baud Rate to 115200</div></div>
</li>
<li>Press the <em>space bar</em> if using VEXnet wireless!</li>
<li>The terminal should be automatically closed upon uploading and re-opened when the upload is complete, so these steps only need to be taken once. The <code>Connect</code> and <code>Disconnect</code> icons can be used to manually open and close the connection.</li>
<li>If the <code>Port</code> of the VEX connection changes, simply close the <code>Terminal</code> view and re-open a new one to connect to a different port.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Management"></a>
Project management</h2>
<ul>
<li>Multiple projects can be open at once. However, to avoid confusion, it may be advisable to close old or unnecessary projects to keep the workspace clean. To close a project and any files it has open, right-click the project in the <code>Project Explorer</code> and select <code>Close Project</code>. <div class="image">
<img src="close_projects.png" alt="close_projects.png"/>
<div class="caption">
Closing an unnecessary PROS project</div></div>
</li>
<li>Projects closed in this way are not deleted. The project can be re-opened in the same state that it had when it was closed by right-clicking the project in the <code>Project Explorer</code> and selecting <code>Open Project</code>. <div class="image">
<img src="open_projects.png" alt="open_projects.png"/>
<div class="caption">
Opening a PROS project</div></div>
</li>
<li>Projects can be deleted by selecting them in the <code>Project Explorer</code> and pressing the <code>DELETE</code> key. <em>This may not be the same as the <code>BACKSPACE</code> key on Macintosh machines</em>. Unless the <code>Delete project contents from disk</code> option is selected, the files will not actually be removed from the directory where the project is stored. Deleting projects should be <em>a last resort</em> unless one plans to immediately add them back through <a class="el" href="index.htm#Git">Source control</a>. Old code can be <em>very</em> useful.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Updating"></a>
Updating a project</h2>
<p>Projects by default remain on the version of PROS that was used to create them. Therefore, users of different versions of PROS will still run that project in the same way. However, individual old projects can be updated to incorporate new PROS features using the <code>VEX &gt; Switch project to PROS ...</code>. Check the confirmation dialog to ensure that the correct project is selected for upgrade! </p><div class="image">
<img src="switch_version.png" alt="switch_version.png"/>
<div class="caption">
Update a project to another revision of PROS</div></div>
<p> PROS also automatically checks for new versions. This check occurs on startup and can be disabled by using <code>Window &gt; Preferences...</code> (Windows/Linux) or <code>Eclipse &gt; Preferences</code> (Mac), then selecting <code>Startup and Shutdown</code> under the <code>General</code> tab and deselecting <code>PROS Project Manager and Update</code>: </p><div class="image">
<img src="disable_update_check.png" alt="disable_update_check.png"/>
<div class="caption">
Disabling the automatic update check</div></div>
<p> <a class="el" href="index.htm#Top">Table of Contents</a></p>
<h1><a class="anchor" id="Tutorial"></a>
PROS Tutorial</h1>
<h2><a class="anchor" id="C"></a>
C Basics</h2>
<p>PROS is a library built on C. This document does not aspire to teach beginners C. Excellent tutorials are available on the Internet by searching for "C" in a browser, bringing up results such as <a href="http://www.cprogramming.com/tutorial/c-tutorial.html">this tutorial on C</a>.</p>
<p>Note that not all information presented in C tutorials is relevant to programming VEX robots with PROS. For example, pointers are used only occasionally, and there is little need for topics such as recursion and file I/O.</p>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Project"></a>
PROS Project Structure</h2>
<p>PROS projects are internally composed of three parts: the <em>user code</em>, the <em>PROS library</em> and the <em>header files</em>.</p>
<p>The <em>PROS library</em> is a single file containing the core PROS routines. This file does not need to be changed. If there appears to be an issue with a core PROS function, please file an issue on the <a href="https://github.com/purduesigbots/purdueros/issues">PROS website</a>.</p>
<p>The <em>header files</em> are all found in the <code>include</code> directory. One header file, <code><a class="el" href="a00003.htm" title="Provides the high-level user functionality intended for use by typical VEX Cortex programmers...">API.h</a></code>, is required to declare the PROS library functions, and also serves as a quick reference. The other file, <code><a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a></code>, is intended for declaring functions and variables shared between the <em>user code</em> files. New header files can be created in the <code>include</code> directory, as long as the name ends with <code>.h</code>. </p><div class="image">
<img src="new_header.png" alt="new_header.png"/>
<div class="caption">
Creating a new header file</div></div>
<p> <em>User code</em> has the actual sequential instructions that govern the robot's behavior. PROS by default splits the user code up into autonomous (<a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>), driver control (<a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a>), and initialization (<a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>) files. Code in one file can talk to code in another file using declarations in the <em>header files</em>. New user code files can be created in the <code>src</code> directory, as long as the name ends with <code>.c</code> it will be compiled with the others. </p><div class="image">
<img src="new_source.png" alt="new_source.png"/>
<div class="caption">
Creating a new source file</div></div>
<p> All user code files should start with</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;#include &quot;main.h&quot;</div>
</div><!-- fragment --><p>to make the critical declarations in <a class="el" href="a00003.htm" title="Provides the high-level user functionality intended for use by typical VEX Cortex programmers...">API.h</a> and <a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a> available in each file.</p>
<div class="image">
<img src="pros_defaultproject.png" alt="pros_defaultproject.png"/>
<div class="caption">
PROS default project structure</div></div>
<p> While more complicated than some environments, splitting up code grants powerful modularity and code reusability, especially when combined with <a class="el" href="index.htm#Git">Source control</a>.</p>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Declaration"></a>
Declaring Functions and Variables</h2>
<p>Functions and variables must be <em>declared</em> before use, as described in many of the <a class="el" href="index.htm#C">C Basics</a> tutorials. Functions and variables can be declared in the typical C manner:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;int sensorValue;</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;void DoIt(int x) {</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    motorSet(5, x);</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;}</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;int getSensorValue(void) {</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    DoIt(127);</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    return sensorValue;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;}</div>
</div><!-- fragment --><p>Doing so will make the variables and functions local to the file in which they exist.</p>
<p>Some functions and variables are useful in more than one location (e.g. a function to use <a class="el" href="a00003.htm#a03c5b04b472d024281f62d7af8854a8e">motorSet</a> on all the robot's drive motors with the same value). Such functions can be declared in any of the three files (<em>or a custom file in the <code>src</code> directory</em>). To make them accessible to any other user code file, <em>prototype</em> the function in <a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>.</p>
<p>Functions can be prototyped by copying the function's declaration line into <a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a> and replacing the function code with <code>;</code>.</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Prototype the &quot;getSensorValue()&quot; function declared above (in main.h)</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;int getSensorValue(void);</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;// Prototype the &quot;DoIt()&quot; function declared above (in main.h)</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;void DoIt(int x);</div>
</div><!-- fragment --><p>Any function can be prototyped in <a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a> regardless of which user code file in which it appears. Variables are a little more difficult; the word <code>extern</code> must be placed <em>in front</em> of the declaration line when it is copied into <a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Prototype the &quot;sensorValue&quot; variable declared above (in main.h)</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;extern int sensorValue;</div>
</div><!-- fragment --><p>For pieces of code intended for frequent reuse, it may be better to create a separate header file with the related declarations, and to include that file in <a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>. Therefore, large pieces of code involving look-up tables, control algorithms, or other complex structures can be quickly ported between projects by copying one <code>.c</code> user code file and one <code>.h</code> header file. </p><div class="image">
<img src="library_files.png" alt="library_files.png"/>
<div class="caption">
Custom libraries with one header and one source file</div></div>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Templates"></a>
Examples and templates</h2>
<h3><a class="anchor" id="Sensors"></a>
Sensors</h3>
<p>Most sensors follow a similar pattern. The sensor is initialized in <a class="el" href="a00007.htm#a25a40b6614565f755233080a384c35f1">initialize</a> and used in multiple places, including <a class="el" href="a00006.htm#a3c7ca506bbc071fa740de13805b7f376">autonomous</a> and <a class="el" href="a00008.htm#ac71a94af413917f27d108e95c4d6f6a7">operatorControl</a>. Typical sensor initialization code thus looks like:</p>
<h4>Analog Yaw-Rate Gyro</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Multiple gyros can be declared</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;Gyro gyro;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;void initialize() {</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // ...</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    // If gyro reads inaccurately, change &quot;0&quot; to desired sensitivity</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    // See documentation on gyroInit for up-to-date sensitivity details</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    gyro = gyroInit(gyro_port_number, 0);</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    // ...</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Variable name matches gyro name(s) in init.c</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;extern Gyro gyro;</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Get gyro reading in degrees</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    int heading = gyroGet(gyro);</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // Reset gyro to zero</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    gyroReset(gyro);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    // ...</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
</div><!-- fragment --><h4>Quadrature Encoder</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Multiple encoders can be declared</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;Encoder encoder;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;void initialize() {</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // ...</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    encoder = encoderInit(top_port_number, bottom_port_number, is_reversed);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    // ...</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Variable name matches encoder name(s) in init.c</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;extern Encoder encoder;</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Get encoder reading in degrees</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    int counts = encoderGet(encoder);</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // Reset encoder to zero</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    encoderReset(encoder);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    // ...</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>Ultrasonic Sensor</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Multiple ultrasonics can be declared</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;Ultrasonic sonar;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;void initialize() {</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // ...</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    sonar = ultrasonicInit(orange_port_number, yellow_port_number);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    // ...</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Variable name matches ultrasonic name(s) in init.c</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;extern Ultrasonic sonar;</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Get ultrasonic reading in centimeters</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    int distance = ultrasonicGet(sonar);</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // ...</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>Integrated Motor Encoders</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void initialize() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Check count to ensure all IMEs are plugged in!</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    int count = imeInitializeAll();</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // ...</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// It may be wise to use #define to establish friendly IME names</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;// Closest IME to the Cortex (first on chain) gets #0, IME connected to that one gets #1,</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;// and so on</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;#define IME_LEFT_MOTOR 0</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;#define IME_RIGHT_MOTOR 1</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Get IME tick count in the &quot;counts&quot; variable</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    // (conversion to rotations varies depending on the motor type in use)</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    int counts;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    imeGet(0, &amp;counts);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    // Or if #define was used:</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    imeGet(IME_LEFT_MOTOR, &amp;counts);</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    // Reset IME to zero</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    imeReset(IME_RIGHT_MOTOR);</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    // ...</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>Buttons, Limit Switches</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void initializeIO() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // One of the few things done in initializeIO()</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    pinMode(switch_pin, INPUT);</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // digitalRead() will return LOW if PRESSED and HIGH if RELEASED</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    if (digitalRead(switch_pin) == LOW) {</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;        // ...</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    }</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    // ...</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="Actuators"></a>
Actuators</h3>
<h4>VEX Speaker</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void initialize() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    speakerInit();</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Play a tune on the speaker</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    speakerPlayRtttl(&quot;Super Mario:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,&quot;</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;        &quot;8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,&quot;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;        &quot;8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,&quot;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;        &quot;8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,&quot;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;        &quot;8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,8p.,&quot;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;        &quot;8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,&quot;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;        &quot;8p,16d#6,8p,16d6,8p,16c6&quot;);</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    // Play a polyphonic tune on the speaker with 2 tracks</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    const char * rtttl[] = {</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;        &quot;Super Mario:d=4,o=5,b=100:&quot;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        &quot;16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,&quot;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        &quot;8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,&quot;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        &quot;8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,&quot;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        &quot;8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,&quot;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        &quot;8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,8p.,&quot;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        &quot;8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,&quot;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        &quot;8p,16d#6,8p,16d6,8p,16c6&quot;,</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        &quot;Super Mario:d=4,o=4,b=100:&quot;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        &quot;16d,16d,32p,8d,16d,8d,8g5,8p,8g,8p,&quot;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        &quot;8g5,16p,8e,16p,8c,16p,8f,8g,16f#,8f,16e.,16c5,16e5,8f5,16d5,8e5,8c5,16a,16b,8g,16p,&quot;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        &quot;8g5,16p,8e,16p,8c,16p,8f,8g,16f#,8f,16e.,16c5,16e5,8f5,16d5,8e5,8c5,16a,16b,8g,16p,&quot;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        &quot;8c,16p,16g,8p,8c5,8f,16p,16c5,16c5,16c5,8f,&quot;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        &quot;8c,16p,16e,8p,16g,16c5,p.,8g,&quot;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        &quot;8c,16p,16g,8p,8c5,8f,16p,16c5,16c5,16c5,8f,&quot;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        &quot;8c,16g#,8p,16a#,8p,16c5&quot;,</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        NULL</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    };</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    speakerPlayArray(rtttl);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    // ...</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>Pneumatic Solenoids</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void initializeIO() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // One of the few things done in initializeIO()</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    digitalWrite(solenoid_pin, LOW);</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    pinMode(solenoid_pin, OUTPUT);</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Change solenoid to HIGH or LOW</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    // The resulting pnematic motion varies depending on tube connections</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    digitalWrite(solenoid_pin, new_value);</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    // ...</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>VEX Motors or Servos</h4>
<p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Turn motor on at given power level</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    // 0 is stop, -127 is full reverse, 127 is full forward</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // For a VEX servo, rotates to a position depending on value</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    // 0 is centered, -127 is fully one way, 127 is fully the other way</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    motorSet(motor_port, new_value);</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    // ...</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>VEX LCD</h4>
<p><a class="el" href="a00007.htm" title="File for initialization code. ">init.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void initialize() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Select &quot;uart1&quot; or &quot;uart2&quot; as appropriate</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    lcdInit(uart1);</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    lcdClear(uart1);</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    // ...</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="a00008.htm" title="File for operator control code. ">opcontrol.c</a> or <a class="el" href="a00006.htm" title="File for autonomous code. ">auto.c</a>:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void ...() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // ...</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // Print formatted text to LCD (line #1) like printf</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    // supposing that &quot;x&quot; is an existing integer variable</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    lcdPrint(uart1, 1, &quot;X is %d&quot;, x);</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    // Print plain text to LCD (much faster than lcdPrint)</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    lcdSetText(uart1, 2, &quot;Hello World&quot;);</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    // ...</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="Tasks"></a>
Tasks</h3>
<p>Tasks are a great tool to do multiple things at once, but they can be difficult to use properly. Each task has a <em>priority</em> and a <em>stack size</em>. Most of the time, tasks should have the default stack size of <code>TASK_DEFAULT_STACK_SIZE</code>. The higher the priority, the more crucial the task is considered; tasks of higher priority will <em>always</em> run in preference to lower priority tasks, unless the higher priority task is using <code><a class="el" href="a00003.htm#a1c59207742a1acf45a8957d7f04f9dfe" title="Wiring-compatible alias of taskDelay(). ">delay()</a></code> or some other waiting action.</p>
<p>Tasks are created using <a class="el" href="a00003.htm#abd5e503a273aaf6abf6869ebd76f2d2d" title="Creates a new task and add it to the list of tasks that are ready to run. ">taskCreate()</a>, which invokes a user function in the new task:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// This function will execute concurrently with other tasks on the system</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;// The parameter will receive the argument given in taskCreate()</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;void startTask(void *ignore) {</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    // ...</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;}</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;// Creates task which will call the function &quot;startTask()&quot; with default priority and</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;// stack size; the argument will be &quot;NULL&quot;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;taskCreate(startTask, TASK_DEFAULT_STACK_SIZE, NULL, TASK_PRIORITY_DEFAULT);</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>Best Task Practices</h4>
<ul>
<li>Limit the number of tasks; five medium sized tasks will run quicker than ten tiny ones. There is also a limit of twelve tasks running at once.</li>
<li>Tasks are usually not automatically stopped if the robot is disabled, unlike <code>operatorControl</code> and <code>autonomous</code>. Tasks running while disabled cannot use the VEX Joystick or VEX Motors. If the task should stop when the robot is disabled, use the <a class="el" href="a00003.htm#a1eceab28885f971892b9d4fc76e0e542">isOnline</a> and/or the <a class="el" href="a00003.htm#aad3f43faea37dc2eddaf4ba0926a511f">isAutonomous</a> function to control the program accordingly. If <a class="el" href="a00003.htm#ab05a241d6d1fd98b1ceb4665db678156">taskRunLoop</a> is used, the task will automatically be cancelled if the robot is disabled or switched between driver and autonomous.</li>
<li>Most tasks should have a priority from <code>TASK_PRIORITY_LOWEST + 1</code> to <code>TASK_PRIORITY_HIGHEST - 1</code>. Tasks of the lowest or highest priority may cause unexpected behavior.</li>
<li>Tasks should wait when there is no work to do so other tasks can run. If a task, especially a high-priority one, does not occasionally use <a class="el" href="a00003.htm#a1c59207742a1acf45a8957d7f04f9dfe">delay</a> or similar, other tasks may not run or run very slowly. Since hardware such as the VEX LCD and Integrated Motor Encoders is also updated by tasks, a run away task can cause unexpected behavior.</li>
<li>The Cortex Microcontroller is very fast. It is unlikely that any repetitive task will gain from running continuously. Even in the fastest scenarios, <code>delay(2)</code> will probably make no noticable difference, but will prevent future task starvation issues.</li>
<li>Tasks using motors or joysticks should use <code>delay(20)</code> as the motors and joysticks are only updated every 20 ms.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h4>Synchronization</h4>
<p>One problem which often beguiles tasks is synchronization. If two tasks try to read the same sensor or control the same motor at the same time, unexpected behavior may occur.</p>
<p>Tasks can be designed never to conflict over motors or sensors:</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void Task1(void *ignore) {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // update motor 2 and 4</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;}</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;void Task2(void *ignore) {</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // update motor 5 and 6</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;}</div>
</div><!-- fragment --><p>If this is impossible, PROS features two types of elements, <em>mutexes</em> and <em>semaphores</em>, that can be used to coordinate tasks. Mutexes stand for <em>mutual exclusion</em>; only one task can hold a mutex at any given time. Other tasks trying to use the mutex must wait for the first task to finish. For this reason, mutexes must always be released after use.</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Create a mutex</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;Mutex mutex = mutexCreate();</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;// Acquire the mutex; other tasks using this command will wait until mutex is released</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;// timeout can specify the maximum time to wait, or MAX_DELAY to wait forever</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;// If the timeout expires, &quot;false&quot; will be returned, otherwise &quot;true&quot;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;mutexTake(mutex, timeout);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;// Release the mutex for other tasks</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;mutexGive(mutex);</div>
</div><!-- fragment --><p>Semaphores are like signals - one task can take the semaphore to wait for a coordination signal from another task which gives it. If multiple tasks wait on the same semaphore, the highest priority one will continue per signal given.</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Create a semaphore</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;// Warning: semaphore starts available, so the first call to semaphoreTake will return</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;// immediately</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;Semaphore semaphore = semaphoreCreate();</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;// Waits for semaphore to be signalled</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;// timeout can specify the maximum time to wait, or MAX_DELAY to wait forever</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;// If the timeout expires, &quot;false&quot; will be returned, otherwise &quot;true&quot;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;semaphoreTake(semaphore, timeout);</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;// Signals the semaphore</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;semaphoreGive(semaphore);</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="Common"></a>
Common tasks</h2>
<h3>Typical operator control loop</h3>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void operatorControl() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    while (1) {</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;        // Read joystick values</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;        int joystick1 = joystickGetAnalog(1, 3);</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;        int joystick2 = joystickGetAnalog(1, 4);</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;        // Optionally process joystick values</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;        // Send joystick outputs to motors</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;        motorSet(2, joystick1);</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;        motorSet(9, joystick2);</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;        // Joystick and motor values refreshed every 20 ms</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;        delay(20);</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    }</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;}</div>
</div><!-- fragment --><h3>Run a particular function in a loop in a new task</h3>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// delta_time is in milliseconds, 1000 milliseconds per second</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;// Function calls will stop if robot is disabled or switched into another mode</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;taskRunLoop(functionName, delta_time);</div>
</div><!-- fragment --><h3>Test autonomous without a competition switch</h3>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;void operatorControl() {</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;    // Plug a limit switch or button into digital port 1</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;    // If this button is being held down when the robot is turned on, autonomous will</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;    // be run before switching to driver control</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    if (digitalRead(1) == LOW)</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;        autonomous();</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    while (1) {</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;        // ...</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    }</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;}</div>
</div><!-- fragment --><p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="FAQ"></a>
PROS Coding FAQ</h2>
<h3><a class="anchor" id="CompileErr"></a>
Build-time Problems</h3>
<ul>
<li><code>undefined reference to ...</code> or <code>implicit declaration of function ...</code>: A function name is not spelled correctly, or the function was not correctly <a class="el" href="index.htm#Declaration">declared</a> in a header file. Custom headers must be included in <code><a class="el" href="a00004.htm" title="Header file for global functions. ">main.h</a></code> or in the file in which they are used; declarations do not appear like magic.</li>
<li><code>format ... expects argument of type ..., but argument has type ...</code>: The value provided to a function like <a class="el" href="a00003.htm#a403c82418e475fa4a8273719e6a7f3e6" title="Prints the formatted string to the debug stream (the PC terminal). ">printf()</a> or <a class="el" href="a00003.htm#a7364395c55595702316ac68519a764fa" title="Prints the formatted string to the attached LCD. ">lcdPrint()</a> does not match the expected type inferred from the format string. Some instances of this warning can be ignored, but crashes can occur if <code>double</code> or <code>long long</code> is mixed with another type.</li>
<li><code>assignment makes pointer from integer without a cast</code>: Typically caused by a C pointer having the wrong number of asterisks to dereference it, or when accidentally assigning a constant to <code>pointer</code> (instead of to <code>*pointer</code>).</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="RuntimeErr"></a>
Run-time Problems</h3>
<ul>
<li><b>VEX LCD updates very slowly or is "frozen"</b>: A task is not waiting using <code><a class="el" href="a00003.htm#a1c59207742a1acf45a8957d7f04f9dfe" title="Wiring-compatible alias of taskDelay(). ">delay()</a></code>. The LCD usually is less important than how well the robot is running, so PROS prioritizes user tasks over the LCD. Only if all other tasks are waiting is the LCD updated.</li>
<li><b>Some tasks are running, others are not</b>: A task is not waiting using <code><a class="el" href="a00003.htm#a1c59207742a1acf45a8957d7f04f9dfe" title="Wiring-compatible alias of taskDelay(). ">delay()</a></code>. Higher or equal priority tasks will still run, but lower priority tasks will not.</li>
<li><b>Neither autonomous nor driver control code starts</b>: The <code><a class="el" href="a00004.htm#a25a40b6614565f755233080a384c35f1" title="Runs user initialization code. ">initialize()</a></code> function may be still running. Some tasks such as <a class="el" href="a00003.htm#a17270080a32b64937a3669089a80120f">gyroInit</a> or <a class="el" href="a00003.htm#aab54c390b2ff91b5b7861db877136392">analogCalibrate</a> take time. If the <code><a class="el" href="a00004.htm#a25a40b6614565f755233080a384c35f1" title="Runs user initialization code. ">initialize()</a></code> function implements some type of loop or autonomous selection routine, verify that it actually has a means of ending.</li>
<li><b>Code restarts unexpectedly</b>: A run-time error has crashed the program. Using a terminal application (see <a class="el" href="index.htm#Debugging">debugging</a>) may reveal the cause of the error. Examine any newly added code for possible problems that may occur at run time.<ul>
<li><code>Segmentation Fault</code> indicates that an invalid C pointer has been used. Check for confusion between pointers and regular variables, or that an invalid pointer has not been passed to a PROS API function.</li>
<li><code>Stack Overflow</code> often indicates infinite recursion, or that the stack size for a custom task is too small. Calling layers of functions and declaring large local variables can require large amounts of space on the stack. If this error occurs in a default task like <a class="el" href="a00004.htm#a3c7ca506bbc071fa740de13805b7f376" title="Runs the user autonomous code. ">autonomous()</a>, consider changing code to reduce the stack requirements, or creating a new task with a larger stack using <a class="el" href="a00003.htm#abd5e503a273aaf6abf6869ebd76f2d2d" title="Creates a new task and add it to the list of tasks that are ready to run. ">taskCreate()</a> to handle large jobs. Large arrays declared inside functions can be declared globally to alleviate pressure on stack space.</li>
<li><code>System Task Failure</code> means that too many tasks were running for the system to start a new one. Disable or merge unnecessary tasks to eliminate this error.</li>
</ul>
</li>
<li><b>Red blinking ROBOT light after download</b>: Turn the Cortex Microcontroller off and on again. This usually resolves the problem, and is good practice to re-initialize the robot in a manner similar to what happens at most competitions. If the error persists, see "Code restarts
  unexpectedly".</li>
<li><b><a class="el" href="a00003.htm#a403c82418e475fa4a8273719e6a7f3e6" title="Prints the formatted string to the debug stream (the PC terminal). ">printf()</a> is not working!</b>: <a class="el" href="a00003.htm#a403c82418e475fa4a8273719e6a7f3e6">printf</a> prints to the PC over the debug terminal. See the section on <a class="el" href="index.htm#Debugging">debugging</a>. <a class="el" href="a00003.htm#a403c82418e475fa4a8273719e6a7f3e6">printf</a> will not print to the VEX LCD; use <a class="el" href="a00003.htm#a7364395c55595702316ac68519a764fa">lcdPrint</a> instead. If VEXnet wireless is in use, press the space bar in the debug terminal to reveal the output.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h1><a class="anchor" id="Advanced"></a>
Advanced topics</h1>
<h2><a class="anchor" id="Git"></a>
Source control</h2>
<h3><a class="anchor" id="GitSetup"></a>
Initial setup</h3>
<ul>
<li>PROS makes it easy to write <em>a lot</em> of code. Collaborating with other team members may be difficult. Plus, it might be handy to go back and see what the code looked like a week ago. <em>Source control</em> solves these problems. A great tutorial on Git source control can be found at <a href="http://git-scm.com/docs/gittutorial">the GIT website</a>, but here's the express tutorial to get a repository up and running quick.</li>
<li>Select <code>File &gt; New &gt; Other...</code> and select <code>Git Repository</code> from the dialog. <div class="image">
<img src="git_newrepo.png" alt="git_newrepo.png"/>
<div class="caption">
Create a Git Repository</div></div>
</li>
<li>Enter a name and a folder to store the repository. The workspace should probably be used as the parent directory; enter a short but descriptive name such as <code>2013Code</code> as the name. Multiple projects can (and should) be stored in the same Git repository. Do <em>not</em> check <code>Create as bare repository</code>.</li>
<li>Press <code>Finish</code>. Nothing appears to happen, but some useful files have been created.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="GitExternal"></a>
Use with an online service</h3>
<ul>
<li>Teams which collaborate using an online service such as <a href="http://www.bitbucket.org">BitBucket</a> or <a href="https://github.com/">GitHub</a> can integrate code sharing with PROS!</li>
<li>Set up a public/private key pair if required by the website. The private key file "id_rsa" will need to be placed in the ".ssh" folder in the user's home directory.</li>
<li>Find the "clone URL" location on the website that allows read-write access: <div class="image">
<img src="git_github.png" alt="git_github.png"/>
<div class="caption">
Find URL to clone project</div></div>
</li>
<li>Select <code>File &gt; Import...</code> in the PROS IDE. In the pop-up dialog, select <code>Projects from Git</code>. <div class="image">
<img src="importitems.png" alt="importitems.png"/>
<div class="caption">
Importing an existing project into the IDE</div></div>
 <div class="image">
<img src="git_importselect.png" alt="git_importselect.png"/>
<div class="caption">
Importing projects from Git</div></div>
</li>
<li>Click <code>URI</code> and enter the clone URL from the website: <div class="image">
<img src="git_importremote.png" alt="git_importremote.png"/>
<div class="caption">
Settings for remote project import</div></div>
</li>
<li>Click <code>Yes</code> if a warning appears about "host key cannot be verified" and enter the public key passphrase or user password if required.</li>
<li>Select <code>Import existing projects</code> in the next dialog box and navigate to the project directory. Click <code>Finish</code> and the project will appear in the <code>Project Explorer</code>. <div class="image">
<img src="git_importproject.png" alt="git_importproject.png"/>
<div class="caption">
Selecting the project for Git import</div></div>
 <a class="el" href="index.htm#Top">Table of Contents</a></li>
</ul>
<h3><a class="anchor" id="GitAdd"></a>
Adding a project to source control</h3>
<ul>
<li>Find the project to be added to source control. If it does not exist yet, create it!</li>
<li>Delete the project from the <code>Project Explorer</code>. Do <em>not</em> delete the contents from disk. Don't worry, it will reappear momentarily!</li>
<li>Use the operating system to copy the project into the Git repository folder which was just created. <div class="image">
<img src="git_pasteproject.png" alt="git_pasteproject.png"/>
<div class="caption">
Move project into the Git repository next to the '.git' folder</div></div>
</li>
<li>Select <code>File &gt; Import...</code> in the PROS IDE. In the pop-up dialog, select <code>Projects from Git</code>. <div class="image">
<img src="importitems.png" alt="importitems.png"/>
<div class="caption">
Importing an existing project into the IDE</div></div>
 <div class="image">
<img src="git_importselect.png" alt="git_importselect.png"/>
<div class="caption">
Importing projects from Git</div></div>
</li>
<li>Click <code>Local</code> and then the repository previously created.</li>
<li>Select <code>Import existing projects</code> in the next dialog box, then select the folder that was just copied into the repository. If the project does not appear, verify that the project was copied into the correct location. It should <em>not</em> be inside the <code>.git</code> directory. Click <code>Finish</code> and the project will re-appear in the <code>Project Explorer</code>. <div class="image">
<img src="git_importproject.png" alt="git_importproject.png"/>
<div class="caption">
Selecting the project for Git import</div></div>
</li>
<li>Add the project to source control by right-clicking on the project in the <code>Project Explorer</code> and selecting <code>Team &gt; Add to Index...</code> in the menu that appears. <div class="image">
<img src="git_addtoindex.png" alt="git_addtoindex.png"/>
<div class="caption">
Adding the project to the index</div></div>
</li>
<li>Make an initial commit, as described in the next section.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="GitCommit"></a>
Committing changes</h3>
<ul>
<li><em>Committing</em> changes stores the current state of all PROS project files in the repository. This marks a point in time where a message can be stored explaining the author and the state of the code. It also marks a point to which all or part of the project can be rolled back in case of emergency.</li>
<li>Commit the project by right-clicking it again and selecting <code>Team &gt; Commit...</code> or pressing the <code>CTRL + #</code> (<code>CTRL + SHIFT + 3</code> on most keyboards) keyboard shortcut. <div class="image">
<img src="git_commit.png" alt="git_commit.png"/>
<div class="caption">
The Commit option in the Team menu</div></div>
</li>
<li>Enter a message for the commit. If the <code>Author</code> and <code>Committer</code> fields are blank, fill them in with the user's name and e-mail, tremendously helpful for identifying the person to credit (or blame) with new code changes. <em>Make sure to click the check mark button</em> near the list of files between the question mark and the square! <div class="image">
<img src="git_commitmsg.png" alt="git_commitmsg.png"/>
<div class="caption">
Enter the commit message and name in the Commit dialog and click the check mark!</div></div>
</li>
<li>Press <code>Commit</code> and the code changes will be stored away. If a file is changed in the project, the icon in the <code>Project Explorer</code> will gain a <code>&gt;</code> indicating that it was modified. <div class="image">
<img src="git_ischanged.png" alt="git_ischanged.png"/>
<div class="caption">
Identifying changed files from last commit</div></div>
</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h3><a class="anchor" id="GitUsage"></a>
Using source control</h3>
<ul>
<li>To see <em>exactly</em> what was changed since the last commit (or any past commit, for that matter), select the file in question (<em>or select the project to see changes to all files</em>), right-click, and select <code>Compare With &gt; Commit...</code>. <div class="image">
<img src="git_compareto.png" alt="git_compareto.png"/>
<div class="caption">
Comparing a file with a Git commit</div></div>
</li>
<li>Select the desired point in time for comparison, and a beautiful dialog pops up showing everything that was changed during that time (as well as a copy of the file as it appeared back then). <div class="image">
<img src="git_selectcommit.png" alt="git_selectcommit.png"/>
<div class="caption">
Selecting a target commit for comparison/replacement</div></div>
 <div class="image">
<img src="git_comparison.png" alt="git_comparison.png"/>
<div class="caption">
Results of comparison showing exactly what was changed</div></div>
</li>
<li>Rolling back changes can be as simple as selecting a few lines, copying from the old, and pasting in the current version. For quick, wholesale rollback of an entire file, select <code>Replace With &gt; Commit...</code> and select the commit to which to roll the file back. <em>This will wipe out any changes since the last commit.</em> It might be better to commit the current code and then roll back the changes. <div class="image">
<img src="git_destroychanges.png" alt="git_destroychanges.png"/>
<div class="caption">
Replacing the file with an old version</div></div>
</li>
<li>Source control can be tough. But using it right can save many hours of rework.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a></p>
<h1><a class="anchor" id="OutsideIDE"></a>
Using PROS without the PROS IDE</h1>
<h2><a class="anchor" id="CmdLine"></a>
Using PROS on the command line</h2>
<p>PROS can be used with just command line utilities, in Windows, Linux, and Mac OS X. <em>Make sure to install the PROS IDE before trying</em>, as important tools such as the ARM cross compiler are installed on the system path when installing the base PROS IDE. Any text editor can be used to edit source code and header files.</p>
<ul>
<li>Compile a project: <code>make</code></li>
<li>Clean a project: <code>make clean</code></li>
<li>Upload a project to a VEX Cortex: <code>make upload</code> <em>Java must be installed</em></li>
</ul>
<div class="image">
<img src="pros_cmdline.png" alt="pros_cmdline.png"/>
<div class="caption">
Using the make utility to compile PROS projects on the command line</div></div>
<p> <a class="el" href="index.htm#Top">Table of Contents</a></p>
<h2><a class="anchor" id="VisualStudio"></a>
Using PROS with Visual Studio</h2>
<p>A copy of Visual Studio and Windows is required. Visual Studio 2010 was used for this document, but the same or similar directions should apply to Visual Studio 2008 or 2013.</p>
<ul>
<li>Open the PROS IDE. <a class="el" href="index.htm#Creating">Create a blank PROS Project</a> to extract the project template, then exit the PROS IDE.</li>
<li>Start Visual Studio. Create a new <code>Makefile Project</code> in the <code>Visual C++</code> category in the desired directory. <div class="image">
<img src="pros_vs2010_create.png" alt="pros_vs2010_create.png"/>
<div class="caption">
Creating a blank Makefile project in Visual Studio</div></div>
</li>
<li>Click <code>Finish</code> in the wizard to create a blank project.</li>
<li>Copy and paste the contents of the blank PROS project created in step one into the project directory. <em>This is inside a subfolder of the directory created in the last two steps</em>. <div class="image">
<img src="pros_vs2010_copy.png" alt="pros_vs2010_copy.png"/>
<div class="caption">
Copying and pasting the project to the Visual Studio project folder</div></div>
</li>
<li>Add the <code>.h</code> files in <code>include</code> to the <code>Header Files</code> section, and the <code>.c</code> and <code>.cpp</code> files in <code>src</code> to the <code>Source Files</code> section, using <code>Add &gt; Existing Item...</code>: <div class="image">
<img src="pros_vs2010_add.png" alt="pros_vs2010_add.png"/>
<div class="caption">
Adding files to the source and include directories in Visual Studio</div></div>
</li>
<li>In <code>Project &gt; Properties...</code> add the include directory to the <code>Include Directories</code> in the <code>VC++ Directories</code> panel: <div class="image">
<img src="pros_vs2010_config3.png" alt="pros_vs2010_config3.png"/>
<div class="caption">
Adding the include folder to the Visual Studio search path</div></div>
</li>
<li>In the <code>NMake</code> panel, add references to <code>make</code> and <code>make clean</code> where prompted: <div class="image">
<img src="pros_vs2010_config1.png" alt="pros_vs2010_config1.png"/>
<div class="caption">
Configuring the Visual Studio make utility for PROS</div></div>
</li>
<li>Create a file named <code>prosload.cmd</code> in a convenient location (preferably where it will not be accidentally moved or committed to <a class="el" href="index.htm#Git">Source control</a>) containing the following text: <pre>
@echo off
cd /d %~dps1
make -k upload
</pre></li>
<li>Use <code>Tools &gt; External Tools</code> to create a tool named "PROS Upload" with the following settings: <div class="image">
<img src="pros_vs2010_config2.png" alt="pros_vs2010_config2.png"/>
<div class="caption">
Configuration settings for PROS Upload tool</div></div>
</li>
<li>Another external tool can optionally be configured to update PROS projects. The batch file must contain (<em>where path-to-PROS-IDE-installation is the directory selected when installing, usually</em> <code>C:\Program Files\PROS</code>): <pre>
@echo off
cd /d %~dps1
PROS=path-to-PROS-IDE-installation
for %%f in (%PROS%\plugins\com.purduesigbots.newcortexproject_*.jar) do java -jar %%f .
</pre>The VS settings for the external tool are the same as the previous example (with the command name changed).</li>
<li>PROS setup with Visual Studio is complete. The standard VS <code>Build</code> functionality will compile the project; the <code>PROS Upload</code> option in the <code>Tools</code> menu will upload the project to an attached VEX Cortex. <em>Not all warning and error messages will be the same as in the Eclipse-based PROS IDE</em>.</li>
</ul>
<p><a class="el" href="index.htm#Top">Table of Contents</a> </p>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
